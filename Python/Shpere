#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Sat Jan  5 15:41:33 2019

@author: diana
"""

import numpy as np
#import csv
import random
from random import randrange
#import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import Axes3D


#with open('realworld.csv') as csvfile:
 #    readCSV = csv.reader(csvfile, delimiter=' ')
    #create my random plane
vec = np.random.randn(6, 3) #6points, 3dimensions
vec /= np.linalg.norm(vec, axis=0)

realvec=np.random.randn(6,3) 
#real sixpoints

p=np.full((6, 2), 0.0)
Noise=np.full((6, 2), 0.0)
A=np.full((12, 12), 0.0)
B =np.full((12, 12), 0.0)
M_no_noise=np.full((12, 1), 0.0)
M_noise=np.full((12, 1), 0.0)
for i in range(6):
    p[i,0]= vec[i,0] / vec[i,2]#convert from homogeneous
    p[i,1] = vec[i][1] / vec[i][2]#convert from homogeneous
    Noise[i,0] = np.random.normal(-10,10)+p[i,0]
    Noise[i,1]=Noise[i,1]-p[i,0]+p[i,1]
     #randomnoiseadded to each x&y pair
    #6 random points u,v from my plane & 6 from real world
#Noise=Noise+p
#here normalize pnorm,normnoise

normp= np.linalg.norm(p)
pnorm=p/normp
NN = np.linalg.norm(Noise)
Norm_Noise =Noise/NN
l = 0
for j in range(12):
    if ((j % 2) == 0):                    #if even 0,0,0,0,xi,yi,zi,1,-vixi,-viyi,-vizi,-vi
     for k in range(4):
                            A[j, k] = 0
                            B[j, k] = 0
     A[j,4] = realvec[l,0]
     A[j,5] = realvec[l,1]
     A[j,6] = realvec[l,2]
     B[j,4] = realvec[l,0]
     B[j,5] = realvec[l,1]
     B[j,6] = realvec[l,2]
     A[j,7] = 1
     B[j,7] = 1
     A[j, 8] = -Norm_Noise[l, 1] * realvec[l,0]
     A[j, 9] = -Norm_Noise[l, 1] * realvec[l,1]
     A[j, 10] = -Norm_Noise[l, 1] * realvec[l,2]
     A[j, 11] = -Norm_Noise[l, 1]
     B[j, 8] = -pnorm[l, 1] * realvec[l,0]
     B[j, 9] = -pnorm[l, 1] * realvec[l,1]
     B[j, 10] = -pnorm[l, 1] * realvec[l,2]
     B[j, 11] = -pnorm[l, 1]
     
    else :
        for k in range(4,8):
            A[j, k]= 0
            B[j, k]= 0    
        A[j,0] = realvec[l,0]
        A[j,1]= realvec[l,1]
        A[j,2] = realvec[l,2]
        B[j,0]=  realvec[l,0]
        B[j,1] =realvec[l,1]
        B[j,2]= realvec[l,2]
        A[j,3] = 1
        B[j,3] = 1
        A[j, 8] = -Norm_Noise[l, 0] * realvec[l,0]
        A[j, 9] = -Norm_Noise[l, 0] * realvec[l,1]
        A[j, 10] = -Norm_Noise[l, 0] * realvec[l,2]
        A[j, 11] = -Norm_Noise[l, 0]
        B[j, 8] = -pnorm[l, 0] * realvec[l,0]
        B[j, 9] = -pnorm[l, 0] * realvec[l,1]
        B[j, 10] = -pnorm[l, 0] * realvec[l,2]
        B[j, 11] = -pnorm[l, 0]
        l = l + 1

U, s, V = np.linalg.svd(A, full_matrices=True)
U2, s2, V2 = np.linalg.svd(B, full_matrices=True) 
Sum=0.0
for final in range(12):
    M_no_noise[final]= V[final,11]
    M_noise[final]= V2[final,11]
    Sum=Sum+(abs(M_no_noise[final]-M_noise[final]))
error=float(Sum/12)
#K is well know (camera calibration)

#Mnoise=reshape(Mnoise,[],3)'
